#pragma once
#include "RBControl_angle.hpp"

// CHANGE THESE so you can find the robot in the Android app
#define OWNER ""
#define NAME ""

// CHANGE THIS:
// Set the battery measuring coefficient. It is different on every chip.
// Measure voltage at battery connector and check the RAW value
// in the serial output of this program and calculate the coeficient like this:
// BATTERY_COEFFICIENT = voltageMeasureAtBatteriesInMilliVolts / RAW
#define BATTERY_COEFFICIENT 9.185f


// WiFi settings for the connect to existing network mode
#define WIFI_NAME "RukoKraj"
#define WIFI_PASSWORD "PlnoRukou"

// WiFi settings for the access point mode
#define WIFI_AP_SSID ("Flus" OWNER "-" NAME)
#define WIFI_AP_PASSWORD "flusflus"
#define WIFI_AP_CHANNEL 12

// WiFi default mode can be switched by holding SW1 at startup.
// Uncomment the line below to make the AP mode default.
// #define WIFI_DEFAULT_AP 1


// Where are the motors connected
#define MOTOR_LEFT rb::MotorId::M2
#define MOTOR_RIGHT rb::MotorId::M1

// Limit the motor maximum power (percent)
#define MOTOR_MAX_POWER_PCT 60

// Change these to 1 or -1 to switch motor polarity in software
static constexpr int MOTOR_POLARITY_SWITCH_LEFT = 1;
static constexpr int MOTOR_POLARITY_SWITCH_RIGHT = 1;


// If your arm is built differently, you can adjust these trims which are added
// to the calculated servo angles. They are in degrees.
static constexpr float BONE_TRIMS[] = { 0.f, 0.f, 0.f };






// Check if the OWNER/NAME is set, DO NOT REMOVE - change the NAME/OWNER above instead.
static_assert(sizeof(OWNER) > 1, "The OWNER config variable is not set, change it in config.hpp!");
static_assert(sizeof(NAME) > 1, "The NAME config variable is not set, change it in config.hpp!");
